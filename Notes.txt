Introduction to Node JS
----------------------------

What is Node Js?
------------------

Node JS is a Javascript runtime built on Chrome's V8 Engine
Node JS is Javascript running on server.

The runtime environment is an environment in which your application runs

Google had developed an engine to parse Javascript code in Machine Code.
This engine's name is V8 Engine.
Similarly we have,
    SpiderMonkey engine in Mozilla
    Nitro Engine in Apple Safari

Ryan Dahl wrote a C++ program and embedded Chrome's V8 Engine in it.
The application was called Node.exe later NodeJs

Node Js is not a framework or a library, its a runtime environment.

When to use Node JS
------------------------
1. I/O Bound
    NodeJS is single threaded - non I/O blocking.
    Which means, it can take multiple requests at a time.
    But it will ot keep waiting for response from DB/Network/Disk,
    it will process other request immideately.

2. Data Streaming application
    When we want to create applications like Netflix, Instagram, Hotstar.
    Which keep loading the content, no matter how much we scroll.

3. Real Time application
    Like Whatsapp/ Hike

When not to use Node JS
------------------------
For CPU Intensive tasks

--------------------------------------------------------------------------------------------------------------------------------------------

First Program in Node js
----------------------------
Create a file index.js
Run it on vscode terminal
    node index.js
--------------------------------------------------------------------------------------------------------------------------------------------

Prerequisites for NodeJs
-----------------------------
Basic Javascript - EventLoops/ Callbacks, etc.
ECMA Script ES5/6
Client Server Architecture
--------------------------------------------------------------------------------------------------------------------------------------------

REPL in Node Js
-------------------

REPL is a feature in NodeJS useful in experimenting NodeJS code and debug JavaScript Code.

R: Read user input, parse into JS data structure and store in memory
E: Evaluate Data tructure
P: Print the result
L: Loops the above command until user presses Ctrl+C twice.

The moment you write "node" in VSCode terminal and press enter
you enter REPL environment.
Just like the console in Browser
whenever you type any Javascript code in the terminal, it responds back like Console tab of Browser
--------------------------------------------------------------------------------------------------------------------------------------------

Node JS Core Modules
----------------------

Consider modules to be same as JavaScript libraries
A set of functions you want to include in your application. 

Node Js has a set of built-in modules (Core Modules) which we can use without installation.

OS Module:
-----------
This module helps in getting OS information.
Like architecture, free memory. total memory, etc.
Check more in docs: https://nodejs.org/docs/latest-v18.x/api/os.html#os


Path Module
-----------------
With this module we can determine
Root folder, extension, basename, etc infor for a given path of file/folder
Check more info  at: https://nodejs.org/docs/latest-v18.x/api/path.html
--------------------------------------------------------------------------------------------------------------------------------------------

Node Package Manager (NPM)
---------------------------
Node package manager (npm) is a package manager and a software register but 
it's also a place where developers can find, build and manage code packages. 
Right now, npm contains over 800,000 packages for various applications, 
from front-end and robotics to mobile apps.

To use npm in our application.
    Write "npm init" in terminal
at root location of app.

We get a package.json file.
Lets install a package, "chalk"
    npm install chalk@4.1.0

We now get all info about chalk package in package-lock.json
and also it gets appended in package.json.
Node modules are also generated which has all the code of chalk package.

We genrally ignore node_modules
Hence added it in .gitignore
--------------------------------------------------------------------------------------------------------------------------------------------

Nodemon
--------
nodemon is a tool that helps develop Node.js based applications by 
automatically restarting the node application when file changes in the directory are detected.

It is recommended to install it globally
    npm install -g nodemon
Since, it is installed globally,
we will not see it as a dependancy in package.json of any app.
Now next time onwards, instead of node index.js
Type:   nodemon index.js
This will automatically re trigger server if any changes detected.
--------------------------------------------------------------------------------------------------------------------------------------------

Module Wrapper functions
------------------------
Explanation: https://www.youtube.com/watch?v=kT2mSjAcYxM&list=PLwGdqUZWnOp00IbeN0OtL9dmnasipZ9x8&index=15
Refer: IIFE in JS
--------------------------------------------------------------------------------------------------------------------------------------------

Node Js Web Server
-------------------
Node Js provides a capability to create your own web server which will handle HTTP requests asynchronously.
We can use IIS or Apache to run Node.js but it is recommended to use Node.js web server.
--------------------------------------------------------------------------------------------------------------------------------------------

Node Js Streams
----------------

Streams are objects that let you read data from a source and write dat to a destination
in a continuous fashion. There are 4 types of streams in Node Js.

Streaming means listening to music/ watching video in real time.
Rather than dowloading first and watching later.

1. Readable: Stream for read operation
2. Writeable: Stream for write operation
3. Duplex: Stream for both read/write
4. Transform: A type of duplex stream where output is computed based on input

Each type of stream is an EventEmitter instance (refer previous commit).
It throws different events at different instances of time.
Commonly used events are:

data - this event is fired when data is available to read
end - this event is fired when there is no more data to read.
error - this event is fired when there's error in receiving/ writing data.
finish - this event is fired when all data has been flushed to underlying system.
--------------------------------------------------------------------------------------------------------------------------------------------

Express Js
-------------

What is Express Js?
Its the most popular framework of Node Js.
Express Js is a web applicatio framework which provides us simple API to build websites, web apps and backends.

Need of Express Js?
--------------------
Writing a small REST API server in Node Js will take 5-10x more time and LOC than Express Js

Create a folder, 
    create app.js in it.
    go to terminal in that folder and write
        npm init
    This will install npm and create a package.json
    Then write  
        npm install express
--------------------------------------------------------------------------------------------------------------------------------------------

Template Engines in Express Js
--------------------------------
Whenever we need to add dynamic content to our static websites, we need to use template engines in Express Js
for rendering the dynamic content.
Some popular te,plates are Pug, EJS, Mustache.

For now, we will use handlebars.js, its an extension to template engine: Mustache.
hbs is another package we would need as a view engine for handlebars.js

Now go to root folder of website and type:
    npm install hbs
Now to use, hbs, we need to create a views older in root directory mandatorily.
    Inside that views folder, create index.hbs file
    We can write entire html code in that hbs file.

Now, we can render this hbs file in ExpressJs.
First we need to define the view engine.
Then serve the hbs file to an end point via res.render()

Now, we can show dynamic content inthe website by passing values into it.
Similar to passing props in React.

Remove the index,html from public folder
Keep the middleware which serves static files so that images and css are loaded properly.



